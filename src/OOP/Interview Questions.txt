Junior Java Interview Questions:

1. What is OOP?
	-> Object-Oriented Programming (OOP) is a programming paradigm based on the concept of "objects."
	It allows developers to structure programs using objects that represent real-world entities.
	OOP promotes modularity, re-usability, and scalability by organizing code into classes and objects.

2. What is an object?
	-> An object is an instance of a class. It contains state (attributes) and behavior (methods).
	For example, a Car object may have attributes like color and model and behaviors like startEngine() and brake().

3. What is a class?

	->A class is a blueprint or template for creating objects.
	It defines attributes (fields/variables) and behaviors (methods/functions) that its objects will have.

4. Which are the main principles/pillars of OOP?
	-> Encapsulation
	-> Abstraction
	-> Inheritance
	-> Polymorphism

5. What is Encapsulation?
	-> Encapsulation is one of the four pillars of OOP.	It refers to hiding the internal details of an object and only exposing what is necessary.
	This is done by restricting direct access to certain variables and methods using access modifiers (like private, public), and providing controlled access through getter and setter methods.

6. How many access modifiers exist in Java?
	-> Java has four access modifiers:
	1. public
	2. private
	3. protected
	4. (default) (also known as "package-private")



7. How does they work?
    Access modifiers control the visibility of classes, methods, and variables.

    Modifier	Access within the same class	Access within the same package	Access in subclasses (other packages)	Accessible everywhere
    private	                ‚úÖ Yes	            ‚ùå No	            			‚ùå No	                        		‚ùå No
    default (no modifier)	‚úÖ Yes	            ‚úÖ Yes	        				‚ùå No	                        		‚ùå No
    protected				‚úÖ Yes				‚úÖ Yes							‚úÖ Yes (only in subclasses)				‚ùå No
    public					‚úÖ Yes				‚úÖ Yes							‚úÖ Yes									‚úÖ Yes


    ‚úî private ‚Üí Strictest, only within the class.
    ‚úî (default) ‚Üí Accessible within the same package.
    ‚úî protected ‚Üí Accessible within the package + subclasses.
    ‚úî public ‚Üí Accessible from anywhere.


8.  What is Inheritance in Java?
	-> Inheritance is an OOP principle that allows one class (child/subclass)
	to inherit the properties and behaviors of another class (parent/superclass).
	It promotes code re-usability and allows hierarchical classification of classes.

9. What are the different types of inheritance in Java?
	-> Single Inheritance (One parent, one child)
	-> Multilevel Inheritance (A class inherits from another class, which also inherits from another class)
	-> Hierarchical Inheritance (Multiple child classes inherit from a single parent class)

10. Can a subclass inherit private members of a superclass?
	-> No, a subclass cannot inherit private members of a superclass directly.
	However, it can access them using public/protected getter and setter methods.

11. What is the super keyword in Java?
	-> Calling the parent class constructor
	-> Calling the parent class methods
	-> Accessing the parent class variables


12. What is an interface in Java?
	-> An interface in Java is a blueprint of a class that contains only abstract methods (before Java üòé
	and	default/static methods (from Java 8 onwards).
	It is used to achieve abstraction and multiple inheritance in Java.

13. What is abstraction in Java?
	-> Abstraction is an OOP principle that hides implementation details and only shows the necessary features.
	It is achieved in Java using:
	->Abstract Classes (abstract keyword)
	->Interfaces (interface keyword)

14. What is the difference between an abstract class and an interface?
	-> Methods:
	Abstract Class 	-> 	Can have both abstract and concrete methods
	Interface 		->  Only abstract methods (until Java üòé

	-> Variables:
	Abstract Class 	-> 	Can have instance variables
	Interface 		->  Only static & final variables (constants)

	-> Constructors:
	Abstract Class 	-> 	Can have constructors
	Interface 		->  Cannot have constructors

	-> Multiple Inheritance:
	Abstract Class 	-> 	Not supported
	Interface 		->  Supported (a class can implement multiple interfaces)

	->Access Modifiers:
	Abstract Class 	-> 	Methods can be public, protected, private
	Interface 		->  Methods are public by default

15. How many levels of abstractions exist in java?
	-> An abstract class can have both abstract (without implementation) and concrete (with implementation) methods.
	It provides partial abstraction (0%‚Äì100%), meaning some methods can have a body,
	while others must be implemented by subclasses.

	-> Interfaces provide 100% abstraction (before Java üòé since they only had abstract methods
	(all methods were public and abstract by default).
	Since Java 8, interfaces can have default and static methods, allowing some concrete implementations.

16. Can an interface extend another interface?
	-> Yes, an interface can extend another interface using the extends keyword.
	A class that implements the child interface must implement all methods from both interfaces.

17. Can a class implement multiple interfaces in Java?
	-> Yes! Java supports multiple inheritance using interfaces. A class can implement multiple interfaces,
	helping to achieve modularity and flexibility.

18. What is polymorphism?
	-> Polymorphism is an OOP principle that allows the same method or function to behave differently based on the object that calls it.
	It enables code reusability and flexibility.
	-> Polymorphism in Java can be classified into two types:

	->Compile-time Polymorphism (Method Overloading)
	->Runtime Polymorphism (Method Overriding)

19. What is difference between Method Overriding and Method Overloading?
	-> Method Overloading = Same method name, different parameters (Compile-time polymorphism).
	-> Method Overriding = Same method, same parameters, different behavior in subclass (Runtime polymorphism).

20. SOLID
	-> S - single responsibility -> –µ–¥–Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–Ω–æ—Å—Ç
	-> O -> Open-Closed principle -> –û—Ç–≤–æ—Ä–µ–Ω –∑–∞ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ, –∑–∞—Ç–≤–æ—Ä–µ–Ω –∑–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è
	-> L -> Liskov substitution -> –≤—Å–µ–∫–∏ –µ–¥–∏–Ω –æ–±–µ–∫—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞–º–µ–Ω–µ–Ω –æ—Ç –Ω–µ–≥–æ–≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫
	-> I -> Interface Segregation - –ø–æ-–¥–æ–±—Ä–µ –¥–∞ –∏–º–∞–º –ø–æ–≤–µ—á–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ —Å –º–∞–ª–∫–æ –º–µ—Ç–æ–¥–∏ –≤ —Ç—è—Ö, –æ—Ç–∫–æ–ª–∫–æ—Ç–æ 1 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∏
	-> D -> Dependency Inversion -> —Ä–∞–∑—á–∏—Ç–∞–º–µ –Ω–∞ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∞ –Ω–µ –Ω–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏